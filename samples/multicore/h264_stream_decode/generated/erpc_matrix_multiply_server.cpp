/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * Copyright (c) 2022 HPMicro
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.9.1 on Sat Dec  3 17:47:02 2022.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_matrix_multiply_server.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 10901 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

ERPC_MANUALLY_CONSTRUCTED_STATIC(MatrixMultiplyService_service, s_MatrixMultiplyService_service);



// Constant variable definitions
#pragma weak matrix_size
extern const int32_t matrix_size = 5;


// Call the correct server shim based on method unique ID.
erpc_status_t MatrixMultiplyService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case kMatrixMultiplyService_erpc_get_decoded_frame_id:
        {
            erpcStatus = erpc_get_decoded_frame_shim(codec, messageFactory, sequence);
            break;
        }

        case kMatrixMultiplyService_erpc_switch_lightled_id:
        {
            erpcStatus = erpc_switch_lightled_shim(codec, messageFactory, sequence);
            break;
        }

        case kMatrixMultiplyService_erpc_transfer_stream_data_id:
        {
            erpcStatus = erpc_transfer_stream_data_shim(codec, messageFactory, sequence);
            break;
        }

        case kMatrixMultiplyService_erpc_get_undealed_data_size_id:
        {
            erpcStatus = erpc_get_undealed_data_size_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for erpc_get_decoded_frame of MatrixMultiplyService interface.
erpc_status_t MatrixMultiplyService_service::erpc_get_decoded_frame_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t buf;
    int32_t len;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        erpc_get_decoded_frame(&buf, &len);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMatrixMultiplyService_service_id, kMatrixMultiplyService_erpc_get_decoded_frame_id, sequence);

        codec->write(buf);

        codec->write(len);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for erpc_switch_lightled of MatrixMultiplyService interface.
erpc_status_t MatrixMultiplyService_service::erpc_switch_lightled_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    // startReadMessage() was already called before this shim was invoked.

    // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
    nestingDetection = true;
#endif
    erpc_switch_lightled();
#if ERPC_NESTED_CALLS_DETECTION
    nestingDetection = false;
#endif
    return codec->getStatus();
}

// Server shim for erpc_transfer_stream_data of MatrixMultiplyService interface.
erpc_status_t MatrixMultiplyService_service::erpc_transfer_stream_data_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t buf;
    int32_t len;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&buf);

    codec->read(&len);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        erpc_transfer_stream_data(buf, len);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMatrixMultiplyService_service_id, kMatrixMultiplyService_erpc_transfer_stream_data_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for erpc_get_undealed_data_size of MatrixMultiplyService interface.
erpc_status_t MatrixMultiplyService_service::erpc_get_undealed_data_size_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = erpc_get_undealed_data_size();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMatrixMultiplyService_service_id, kMatrixMultiplyService_erpc_get_undealed_data_size_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
erpc_service_t create_MatrixMultiplyService_service()
{
    return new (nothrow) MatrixMultiplyService_service();
}

void destroy_MatrixMultiplyService_service(erpc_service_t service)
{
    if (service)
    {
        delete (MatrixMultiplyService_service *)service;
    }
}
#elif ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_STATIC
erpc_service_t create_MatrixMultiplyService_service()
{
    s_MatrixMultiplyService_service.construct();
    return s_MatrixMultiplyService_service.get();
}

void destroy_MatrixMultiplyService_service()
{
    s_MatrixMultiplyService_service.destroy();
}
#else
#warning "Unknown eRPC allocation policy!"
#endif
